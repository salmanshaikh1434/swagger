<?php	header("Access-Control-Allow-Origin: *");	header("Content-Type: application/json; charset=UTF-8");	header("Access-Control-Allow-Methods: POST");	header("Access-Control-Max-Age: 3600");	header("Access-Control-Allow-Headers: Content-Type, Access-Control-Allow-Headers, Authorization, X-Requested-With");	include_once '../config/database.php';	$database = new Database();	$db = $database->getConnection();	$bulk = json_decode(file_get_contents("php://input"));	$stmt = $db->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);	$stmt = $db->beginTransaction(); 	foreach($bulk->records as $data){		try {		$query = "INSERT INTO cat (`cat`,`name`,`seq`,`lspace`,`code`,`cost`,`taxlevel`,`sur`,`disc`,`dbcr`,`cflag`,`income`,`cog`,`inventory`,`discount`,`who`,`wsgroup`,`wscod`,`wsgallons`,`catnum`,`fson`,`fsfactor`,`datacap`,`sent`,`belowcost`,`tstamp`,`isdel`,`lreg`,`lstore`)			VALUES 		(:cat,:name,:seq,:lspace,:code,:cost,:taxlevel,:sur,:disc,:dbcr,:cflag,:income,:cog,:inventory,:discount,:who,:wsgroup,:wscod,:wsgallons,:catnum,:fson,:fsfactor,:datacap,:sent,:belowcost,now(),0,:lreg,:lstore)		ON DUPLICATE KEY UPDATE		`cat` = :cat,		`name` = :name,		`seq` = :seq,		`lspace` = :lspace,		`code` = :code,		`cost` = :cost,		`taxlevel` = :taxlevel,		`sur` = :sur,		`disc` = :disc,		`dbcr` = :dbcr,		`cflag` = :cflag,		`income` = :income,		`cog` = :cog,		`inventory` = :inventory,		`discount` = :discount,		`who` = :who,		`wsgroup` = :wsgroup,		`wscod` = :wscod,		`wsgallons` = :wsgallons,		`catnum` = :catnum,		`fson` = :fson,		`fsfactor` = :fsfactor,		`datacap` = :datacap,		`sent` = :sent,		`belowcost` = :belowcost,		`tstamp` = NOW(),		`lstore` = :lstore,		`lreg` = :lreg,		`isdel` = :isdel";		$stmt = $db->prepare($query);		$thiscat=strip_tags($data->cat);		$thisname=strip_tags($data->name);		$thisseq=strip_tags($data->seq);		$thislspace=strip_tags($data->lspace);		$thiscode=strip_tags($data->code);		$thiscost=strip_tags($data->cost);		$thistaxlevel=strip_tags($data->taxlevel);		$thissur=strip_tags($data->sur);		$thisdisc=strip_tags($data->disc);		$thisdbcr=strip_tags($data->dbcr);		$thiscflag=strip_tags($data->cflag);		$thisincome=strip_tags($data->income);		$thiscog=strip_tags($data->cog);		$thisinventory=strip_tags($data->inventory);		$thisdiscount=strip_tags($data->discount);		$thiswho=strip_tags($data->who);		$thiswsgroup=strip_tags($data->wsgroup);		$thiswscod=strip_tags($data->wscod);		$thiswsgallons=strip_tags($data->wsgallons);		$thiscatnum=strip_tags($data->catnum);		$thisfson=strip_tags($data->fson);		$thisfsfactor=strip_tags($data->fsfactor);		$thisdatacap=strip_tags($data->datacap);		$thissent=strip_tags($data->sent);		$thisbelowcost=strip_tags($data->belowcost);		$thislreg=strip_tags($data->lreg);		$thislstore=strip_tags($data->lstore);		$thisisdel=strip_tags($data->isdel);		$thiststamp=strip_tags($data->tstamp);		$stmt->bindParam(':cat', $thiscat);		$stmt->bindParam(':name', $thisname);		$stmt->bindParam(':seq', $thisseq);		$stmt->bindParam(':lspace', $thislspace);		$stmt->bindParam(':code', $thiscode);		$stmt->bindParam(':cost', $thiscost);		$stmt->bindParam(':taxlevel', $thistaxlevel);		$stmt->bindParam(':sur', $thissur);		$stmt->bindParam(':disc', $thisdisc);		$stmt->bindParam(':dbcr', $thisdbcr);		$stmt->bindParam(':cflag', $thiscflag);		$stmt->bindParam(':income', $thisincome);		$stmt->bindParam(':cog', $thiscog);		$stmt->bindParam(':inventory', $thisinventory);		$stmt->bindParam(':discount', $thisdiscount);		$stmt->bindParam(':who', $thiswho);		$stmt->bindParam(':wsgroup', $thiswsgroup);		$stmt->bindParam(':wscod', $thiswscod);		$stmt->bindParam(':wsgallons', $thiswsgallons);		$stmt->bindParam(':catnum', $thiscatnum);		$stmt->bindParam(':fson', $thisfson);		$stmt->bindParam(':fsfactor', $thisfsfactor);		$stmt->bindParam(':datacap', $thisdatacap);		$stmt->bindParam(':sent', $thissent);		$stmt->bindParam(':belowcost', $thisbelowcost);		$stmt->bindParam(':lreg', $thislreg);		$stmt->bindParam(':lstore', $thislstore);		$stmt->bindParam(':isdel', $thisisdel);		$stmt->bindParam(':tstamp', $thiststamp);		$stmt->execute();		} catch (PDOException $e) {			$message = $e->getMessage();			echo $message;		}		}		$spiritsEND=$db->commit();		if($spiritsEND==TRUE){			http_response_code(200);			echo json_encode(array("message" => "UPDATED.."));		}		else{			http_response_code(503);			echo json_encode(array("message" => "ERROR UPDATING!!"));			echo json_encode(array("error" =>$spiritsEND));		}?>