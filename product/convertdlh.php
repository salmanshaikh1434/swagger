<?php	header("Access-Control-Allow-Origin: *");	header("Content-Type: application/json; charset=UTF-8");	header("Access-Control-Allow-Methods: POST");	header("Access-Control-Max-Age: 3600");	header("Access-Control-Allow-Headers: Content-Type, Access-Control-Allow-Headers, Authorization, X-Requested-With");	include_once '../config/database.php';	$database = new Database();	$db = $database->getConnection();	$bulk = json_decode(file_get_contents("php://input"));	$stmt = $db->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);	$stmt = $db->beginTransaction(); 	foreach($bulk->records as $data){		try {		$query = "INSERT INTO dlh (`dealnum`,`vendor`,`vcode`,`venddeal`,`descript`,`startdate`,`stopdate`,`qty1`,`qty2`,`qty3`,`qty4`,`qty5`,`invoiclevl`,`accumlevl`,`qtytodate`,`qtyonorder`,`security`,`stores`,`who`,`memo`,`activlevel`,`accumulate`,`sent`,`tstamp`,`isdel`,`lreg`,`lstore`)			VALUES 		(:dealnum,:vendor,:vcode,:venddeal,:descript,:startdate,:stopdate,:qty1,:qty2,:qty3,:qty4,:qty5,:invoiclevl,:accumlevl,:qtytodate,:qtyonorder,:security,:stores,:who,:memo,:activlevel,:accumulate,:sent,now(),0,:lreg,:lstore)		ON DUPLICATE KEY UPDATE		`dealnum` = :dealnum,		`vendor` = :vendor,		`vcode` = :vcode,		`venddeal` = :venddeal,		`descript` = :descript,		`startdate` = :startdate,		`stopdate` = :stopdate,		`qty1` = :qty1,		`qty2` = :qty2,		`qty3` = :qty3,		`qty4` = :qty4,		`qty5` = :qty5,		`invoiclevl` = :invoiclevl,		`accumlevl` = :accumlevl,		`qtytodate` = :qtytodate,		`qtyonorder` = :qtyonorder,		`security` = :security,		`stores` = :stores,		`who` = :who,		`memo` = :memo,		`activlevel` = :activlevel,		`accumulate` = :accumulate,		`sent` = :sent,		`tstamp` = NOW(),		`lstore` = :lstore,		`lreg` = :lreg,		`isdel` = :isdel";		$stmt = $db->prepare($query);		$thisdealnum=strip_tags($data->dealnum);		$thisvendor=strip_tags($data->vendor);		$thisvcode=strip_tags($data->vcode);		$thisvenddeal=strip_tags($data->venddeal);		$thisdescript=strip_tags($data->descript);		$thisstartdate=strip_tags($data->startdate);		$thisstopdate=strip_tags($data->stopdate);		$thisqty1=strip_tags($data->qty1);		$thisqty2=strip_tags($data->qty2);		$thisqty3=strip_tags($data->qty3);		$thisqty4=strip_tags($data->qty4);		$thisqty5=strip_tags($data->qty5);		$thisinvoiclevl=strip_tags($data->invoiclevl);		$thisaccumlevl=strip_tags($data->accumlevl);		$thisqtytodate=strip_tags($data->qtytodate);		$thisqtyonorder=strip_tags($data->qtyonorder);		$thissecurity=strip_tags($data->security);		$thisstores=strip_tags($data->stores);		$thiswho=strip_tags($data->who);		$thismemo=strip_tags($data->memo);		$thisactivlevel=strip_tags($data->activlevel);		$thisaccumulate=strip_tags($data->accumulate);		$thissent=strip_tags($data->sent);		$thislreg=strip_tags($data->lreg);		$thislstore=strip_tags($data->lstore);		$thisisdel=strip_tags($data->isdel);		$thiststamp=strip_tags($data->tstamp);		$stmt->bindParam(':dealnum', $thisdealnum);		$stmt->bindParam(':vendor', $thisvendor);		$stmt->bindParam(':vcode', $thisvcode);		$stmt->bindParam(':venddeal', $thisvenddeal);		$stmt->bindParam(':descript', $thisdescript);		$stmt->bindParam(':startdate', $thisstartdate);		$stmt->bindParam(':stopdate', $thisstopdate);		$stmt->bindParam(':qty1', $thisqty1);		$stmt->bindParam(':qty2', $thisqty2);		$stmt->bindParam(':qty3', $thisqty3);		$stmt->bindParam(':qty4', $thisqty4);		$stmt->bindParam(':qty5', $thisqty5);		$stmt->bindParam(':invoiclevl', $thisinvoiclevl);		$stmt->bindParam(':accumlevl', $thisaccumlevl);		$stmt->bindParam(':qtytodate', $thisqtytodate);		$stmt->bindParam(':qtyonorder', $thisqtyonorder);		$stmt->bindParam(':security', $thissecurity);		$stmt->bindParam(':stores', $thisstores);		$stmt->bindParam(':who', $thiswho);		$stmt->bindParam(':memo', $thismemo);		$stmt->bindParam(':activlevel', $thisactivlevel);		$stmt->bindParam(':accumulate', $thisaccumulate);		$stmt->bindParam(':sent', $thissent);		$stmt->bindParam(':lreg', $thislreg);		$stmt->bindParam(':lstore', $thislstore);		$stmt->bindParam(':isdel', $thisisdel);		$stmt->bindParam(':tstamp', $thiststamp);		$stmt->execute();		} catch (PDOException $e) {			$message = $e->getMessage();			echo $message;		}		}		$spiritsEND=$db->commit();		if($spiritsEND==TRUE){			http_response_code(200);			echo json_encode(array("message" => "UPDATED.."));		}		else{			http_response_code(503);			echo json_encode(array("message" => "ERROR UPDATING!!"));			echo json_encode(array("error" =>$spiritsEND));		}?>