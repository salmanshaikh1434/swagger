<?php	header("Access-Control-Allow-Origin: *");	header("Content-Type: application/json; charset=UTF-8");	header("Access-Control-Allow-Methods: POST");	header("Access-Control-Max-Age: 3600");	header("Access-Control-Allow-Headers: Content-Type, Access-Control-Allow-Headers, Authorization, X-Requested-With");	include_once '../config/database.php';	$database = new Database();	$db = $database->getConnection();	$bulk = json_decode(file_get_contents("php://input"));	$stmt = $db->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);	$stmt = $db->beginTransaction(); 	foreach($bulk->records as $data){		try {		$query = "INSERT INTO dld (`dealnum`,`line`,`sku`,`name`,`sname`,`pack`,`ml`,`vendor`,`vcode`,`vid`,`startdate`,`stopdate`,`frontline`,`disc1`,`disc2`,`disc3`,`disc4`,`disc5`,`invoiclevl`,`accumlevl`,`qtytodate`,`qtyonorder`,`security`,`stores`,`who`,`activlevel`,`tstamp`,`isdel`,`lreg`,`lstore`)			VALUES 		(:dealnum,:line,:sku,:name,:sname,:pack,:ml,:vendor,:vcode,:vid,:startdate,:stopdate,:frontline,:disc1,:disc2,:disc3,:disc4,:disc5,:invoiclevl,:accumlevl,:qtytodate,:qtyonorder,:security,:stores,:who,:activlevel,now(),0,:lreg,:lstore)		ON DUPLICATE KEY UPDATE		`dealnum` = :dealnum,		`line` = :line,		`sku` = :sku,		`name` = :name,		`sname` = :sname,		`pack` = :pack,		`ml` = :ml,		`vendor` = :vendor,		`vcode` = :vcode,		`vid` = :vid,		`startdate` = :startdate,		`stopdate` = :stopdate,		`frontline` = :frontline,		`disc1` = :disc1,		`disc2` = :disc2,		`disc3` = :disc3,		`disc4` = :disc4,		`disc5` = :disc5,		`invoiclevl` = :invoiclevl,		`accumlevl` = :accumlevl,		`qtytodate` = :qtytodate,		`qtyonorder` = :qtyonorder,		`security` = :security,		`stores` = :stores,		`who` = :who,		`activlevel` = :activlevel,		`tstamp` = NOW(),		`lstore` = :lstore,		`lreg` = :lreg,		`isdel` = :isdel";		$stmt = $db->prepare($query);		$thisdealnum=strip_tags($data->dealnum);		$thisline=strip_tags($data->line);		$thissku=strip_tags($data->sku);		$thisname=strip_tags($data->name);		$thissname=strip_tags($data->sname);		$thispack=strip_tags($data->pack);		$thisml=strip_tags($data->ml);		$thisvendor=strip_tags($data->vendor);		$thisvcode=strip_tags($data->vcode);		$thisvid=strip_tags($data->vid);		$thisstartdate=strip_tags($data->startdate);		$thisstopdate=strip_tags($data->stopdate);		$thisfrontline=strip_tags($data->frontline);		$thisdisc1=strip_tags($data->disc1);		$thisdisc2=strip_tags($data->disc2);		$thisdisc3=strip_tags($data->disc3);		$thisdisc4=strip_tags($data->disc4);		$thisdisc5=strip_tags($data->disc5);		$thisinvoiclevl=strip_tags($data->invoiclevl);		$thisaccumlevl=strip_tags($data->accumlevl);		$thisqtytodate=strip_tags($data->qtytodate);		$thisqtyonorder=strip_tags($data->qtyonorder);		$thissecurity=strip_tags($data->security);		$thisstores=strip_tags($data->stores);		$thiswho=strip_tags($data->who);		$thisactivlevel=strip_tags($data->activlevel);		$thislreg=strip_tags($data->lreg);		$thislstore=strip_tags($data->lstore);		$thisisdel=strip_tags($data->isdel);		$thiststamp=strip_tags($data->tstamp);		$stmt->bindParam(':dealnum', $thisdealnum);		$stmt->bindParam(':line', $thisline);		$stmt->bindParam(':sku', $thissku);		$stmt->bindParam(':name', $thisname);		$stmt->bindParam(':sname', $thissname);		$stmt->bindParam(':pack', $thispack);		$stmt->bindParam(':ml', $thisml);		$stmt->bindParam(':vendor', $thisvendor);		$stmt->bindParam(':vcode', $thisvcode);		$stmt->bindParam(':vid', $thisvid);		$stmt->bindParam(':startdate', $thisstartdate);		$stmt->bindParam(':stopdate', $thisstopdate);		$stmt->bindParam(':frontline', $thisfrontline);		$stmt->bindParam(':disc1', $thisdisc1);		$stmt->bindParam(':disc2', $thisdisc2);		$stmt->bindParam(':disc3', $thisdisc3);		$stmt->bindParam(':disc4', $thisdisc4);		$stmt->bindParam(':disc5', $thisdisc5);		$stmt->bindParam(':invoiclevl', $thisinvoiclevl);		$stmt->bindParam(':accumlevl', $thisaccumlevl);		$stmt->bindParam(':qtytodate', $thisqtytodate);		$stmt->bindParam(':qtyonorder', $thisqtyonorder);		$stmt->bindParam(':security', $thissecurity);		$stmt->bindParam(':stores', $thisstores);		$stmt->bindParam(':who', $thiswho);		$stmt->bindParam(':activlevel', $thisactivlevel);		$stmt->bindParam(':lreg', $thislreg);		$stmt->bindParam(':lstore', $thislstore);		$stmt->bindParam(':isdel', $thisisdel);		$stmt->bindParam(':tstamp', $thiststamp);		$stmt->execute();		} catch (PDOException $e) {			$message = $e->getMessage();			echo $message;		}		}		$spiritsEND=$db->commit();		if($spiritsEND==TRUE){			http_response_code(200);			echo json_encode(array("message" => "UPDATED.."));		}		else{			http_response_code(503);			echo json_encode(array("message" => "ERROR UPDATING!!"));			echo json_encode(array("error" =>$spiritsEND));		}?>