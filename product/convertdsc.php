<?php	header("Access-Control-Allow-Origin: *");	header("Content-Type: application/json; charset=UTF-8");	header("Access-Control-Allow-Methods: POST");	header("Access-Control-Max-Age: 3600");	header("Access-Control-Allow-Headers: Content-Type, Access-Control-Allow-Headers, Authorization, X-Requested-With");	include_once '../config/database.php';	$database = new Database();	$db = $database->getConnection();	$bulk = json_decode(file_get_contents("php://input"));	$stmt = $db->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);	$stmt = $db->beginTransaction(); 	foreach($bulk->records as $data){		try {		$query = "INSERT INTO dsc (`dcode`,`chain`,`descript`,`mix`,`match`,`qty`,`qtype`,`level1disc`,`level2disc`,`level3disc`,`level4disc`,`level5disc`,`additive`,`freesku`,`freeqty`,`promo`,`onsale`,`who`,`override`,`level6disc`,`level7disc`,`level8disc`,`sent`,`tstamp`,`isdel`,`lreg`,`lstore`)			VALUES 		(:dcode,:chain,:descript,:mix,:match,:qty,:qtype,:level1disc,:level2disc,:level3disc,:level4disc,:level5disc,:additive,:freesku,:freeqty,:promo,:onsale,:who,:override,:level6disc,:level7disc,:level8disc,:sent,now(),0,:lreg,:lstore)		ON DUPLICATE KEY UPDATE		`dcode` = :dcode,		`chain` = :chain,		`descript` = :descript,		`mix` = :mix,		`match` = :match,		`qty` = :qty,		`qtype` = :qtype,		`level1disc` = :level1disc,		`level2disc` = :level2disc,		`level3disc` = :level3disc,		`level4disc` = :level4disc,		`level5disc` = :level5disc,		`additive` = :additive,		`freesku` = :freesku,		`freeqty` = :freeqty,		`promo` = :promo,		`onsale` = :onsale,		`who` = :who,		`override` = :override,		`level6disc` = :level6disc,		`level7disc` = :level7disc,		`level8disc` = :level8disc,		`sent` = :sent,		`tstamp` = NOW(),		`lstore` = :lstore,		`lreg` = :lreg,		`isdel` = :isdel";		$stmt = $db->prepare($query);		$thisdcode=strip_tags($data->dcode);		$thischain=strip_tags($data->chain);		$thisdescript=strip_tags($data->descript);		$thismix=strip_tags($data->mix);		$thismatch=strip_tags($data->match);		$thisqty=strip_tags($data->qty);		$thisqtype=strip_tags($data->qtype);		$thislevel1disc=strip_tags($data->level1disc);		$thislevel2disc=strip_tags($data->level2disc);		$thislevel3disc=strip_tags($data->level3disc);		$thislevel4disc=strip_tags($data->level4disc);		$thislevel5disc=strip_tags($data->level5disc);		$thisadditive=strip_tags($data->additive);		$thisfreesku=strip_tags($data->freesku);		$thisfreeqty=strip_tags($data->freeqty);		$thispromo=strip_tags($data->promo);		$thisonsale=strip_tags($data->onsale);		$thiswho=strip_tags($data->who);		$thisoverride=strip_tags($data->override);		$thislevel6disc=strip_tags($data->level6disc);		$thislevel7disc=strip_tags($data->level7disc);		$thislevel8disc=strip_tags($data->level8disc);		$thissent=strip_tags($data->sent);		$thislreg=strip_tags($data->lreg);		$thislstore=strip_tags($data->lstore);		$thisisdel=strip_tags($data->isdel);		$thiststamp=strip_tags($data->tstamp);		$stmt->bindParam(':dcode', $thisdcode);		$stmt->bindParam(':chain', $thischain);		$stmt->bindParam(':descript', $thisdescript);		$stmt->bindParam(':mix', $thismix);		$stmt->bindParam(':match', $thismatch);		$stmt->bindParam(':qty', $thisqty);		$stmt->bindParam(':qtype', $thisqtype);		$stmt->bindParam(':level1disc', $thislevel1disc);		$stmt->bindParam(':level2disc', $thislevel2disc);		$stmt->bindParam(':level3disc', $thislevel3disc);		$stmt->bindParam(':level4disc', $thislevel4disc);		$stmt->bindParam(':level5disc', $thislevel5disc);		$stmt->bindParam(':additive', $thisadditive);		$stmt->bindParam(':freesku', $thisfreesku);		$stmt->bindParam(':freeqty', $thisfreeqty);		$stmt->bindParam(':promo', $thispromo);		$stmt->bindParam(':onsale', $thisonsale);		$stmt->bindParam(':who', $thiswho);		$stmt->bindParam(':override', $thisoverride);		$stmt->bindParam(':level6disc', $thislevel6disc);		$stmt->bindParam(':level7disc', $thislevel7disc);		$stmt->bindParam(':level8disc', $thislevel8disc);		$stmt->bindParam(':sent', $thissent);		$stmt->bindParam(':lreg', $thislreg);		$stmt->bindParam(':lstore', $thislstore);		$stmt->bindParam(':isdel', $thisisdel);		$stmt->bindParam(':tstamp', $thiststamp);		$stmt->execute();		} catch (PDOException $e) {			$message = $e->getMessage();			echo $message;		}		}		$spiritsEND=$db->commit();		if($spiritsEND==TRUE){			http_response_code(200);			echo json_encode(array("message" => "UPDATED.."));		}		else{			http_response_code(503);			echo json_encode(array("message" => "ERROR UPDATING!!"));			echo json_encode(array("error" =>$spiritsEND));		}?>