<?php	header("Access-Control-Allow-Origin: *");	header("Content-Type: application/json; charset=UTF-8");	header("Access-Control-Allow-Methods: POST");	header("Access-Control-Max-Age: 3600");	header("Access-Control-Allow-Headers: Content-Type, Access-Control-Allow-Headers, Authorization, X-Requested-With");	include_once '../config/database.php';	$database = new Database();	$db = $database->getConnection();	$bulk = json_decode(file_get_contents("php://input"));	$stmt = $db->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);	$stmt = $db->beginTransaction(); 	foreach($bulk->records as $data){		try {		$query = "INSERT INTO stk (`sku`,`store`,`floor`,`back`,`shipped`,`kits`,`stat`,`mtd_units`,`weeks`,`sdate`,`mtd_dol`,`mtd_prof`,`ytd_units`,`ytd_dol`,`ytd_prof`,`acost`,`lcost`,`pvend`,`lvend`,`pdate`,`smin`,`sord`,`sweeks`,`freeze_w`,`shelf`,`rshelf`,`sloc`,`bloc`,`who`,`inet`,`depos`,`skipstat`,`mincost`,`base`,`sent`,`ware`,`vintage`,`tstamp`,`isdel`,`lreg`,`lstore`)			VALUES 		(:sku,:store,:floor,:back,:shipped,:kits,:stat,:mtd_units,:weeks,:sdate,:mtd_dol,:mtd_prof,:ytd_units,:ytd_dol,:ytd_prof,:acost,:lcost,:pvend,:lvend,:pdate,:smin,:sord,:sweeks,:freeze_w,:shelf,:rshelf,:sloc,:bloc,:who,:inet,:depos,:skipstat,:mincost,:base,:sent,:ware,:vintage,now(),0,:lreg,:lstore)		ON DUPLICATE KEY UPDATE		`sku` = :sku,		`store` = :store,		`floor` = :floor,		`back` = :back,		`shipped` = :shipped,		`kits` = :kits,		`stat` = :stat,		`mtd_units` = :mtd_units,		`weeks` = :weeks,		`sdate` = :sdate,		`mtd_dol` = :mtd_dol,		`mtd_prof` = :mtd_prof,		`ytd_units` = :ytd_units,		`ytd_dol` = :ytd_dol,		`ytd_prof` = :ytd_prof,		`acost` = :acost,		`lcost` = :lcost,		`pvend` = :pvend,		`lvend` = :lvend,		`pdate` = :pdate,		`smin` = :smin,		`sord` = :sord,		`sweeks` = :sweeks,		`freeze_w` = :freeze_w,		`shelf` = :shelf,		`rshelf` = :rshelf,		`sloc` = :sloc,		`bloc` = :bloc,		`who` = :who,		`inet` = :inet,		`depos` = :depos,		`skipstat` = :skipstat,		`mincost` = :mincost,		`base` = :base,		`sent` = :sent,		`ware` = :ware,		`vintage` = :vintage,		`tstamp` = NOW(),		`lstore` = :lstore,		`lreg` = :lreg,		`isdel` = :isdel";		$stmt = $db->prepare($query);		$thissku=strip_tags($data->sku);		$thisstore=strip_tags($data->store);		$thisfloor=strip_tags($data->floor);		$thisback=strip_tags($data->back);		$thisshipped=strip_tags($data->shipped);		$thiskits=strip_tags($data->kits);		$thisstat=strip_tags($data->stat);		$thismtd_units=strip_tags($data->mtd_units);		$thisweeks=strip_tags($data->weeks);		$thissdate=strip_tags($data->sdate);		$thismtd_dol=strip_tags($data->mtd_dol);		$thismtd_prof=strip_tags($data->mtd_prof);		$thisytd_units=strip_tags($data->ytd_units);		$thisytd_dol=strip_tags($data->ytd_dol);		$thisytd_prof=strip_tags($data->ytd_prof);		$thisacost=strip_tags($data->acost);		$thislcost=strip_tags($data->lcost);		$thispvend=strip_tags($data->pvend);		$thislvend=strip_tags($data->lvend);		$thispdate=strip_tags($data->pdate);		$thissmin=strip_tags($data->smin);		$thissord=strip_tags($data->sord);		$thissweeks=strip_tags($data->sweeks);		$thisfreeze_w=strip_tags($data->freeze_w);		$thisshelf=strip_tags($data->shelf);		$thisrshelf=strip_tags($data->rshelf);		$thissloc=strip_tags($data->sloc);		$thisbloc=strip_tags($data->bloc);		$thiswho=strip_tags($data->who);		$thisinet=strip_tags($data->inet);		$thisdepos=strip_tags($data->depos);		$thisskipstat=strip_tags($data->skipstat);		$thismincost=strip_tags($data->mincost);		$thisbase=strip_tags($data->base);		$thissent=strip_tags($data->sent);		$thisware=strip_tags($data->ware);		$thisvintage=strip_tags($data->vintage);		$thislreg=strip_tags($data->lreg);		$thislstore=strip_tags($data->lstore);		$thisisdel=strip_tags($data->isdel);		$thiststamp=strip_tags($data->tstamp);		$stmt->bindParam(':sku', $thissku);		$stmt->bindParam(':store', $thisstore);		$stmt->bindParam(':floor', $thisfloor);		$stmt->bindParam(':back', $thisback);		$stmt->bindParam(':shipped', $thisshipped);		$stmt->bindParam(':kits', $thiskits);		$stmt->bindParam(':stat', $thisstat);		$stmt->bindParam(':mtd_units', $thismtd_units);		$stmt->bindParam(':weeks', $thisweeks);		$stmt->bindParam(':sdate', $thissdate);		$stmt->bindParam(':mtd_dol', $thismtd_dol);		$stmt->bindParam(':mtd_prof', $thismtd_prof);		$stmt->bindParam(':ytd_units', $thisytd_units);		$stmt->bindParam(':ytd_dol', $thisytd_dol);		$stmt->bindParam(':ytd_prof', $thisytd_prof);		$stmt->bindParam(':acost', $thisacost);		$stmt->bindParam(':lcost', $thislcost);		$stmt->bindParam(':pvend', $thispvend);		$stmt->bindParam(':lvend', $thislvend);		$stmt->bindParam(':pdate', $thispdate);		$stmt->bindParam(':smin', $thissmin);		$stmt->bindParam(':sord', $thissord);		$stmt->bindParam(':sweeks', $thissweeks);		$stmt->bindParam(':freeze_w', $thisfreeze_w);		$stmt->bindParam(':shelf', $thisshelf);		$stmt->bindParam(':rshelf', $thisrshelf);		$stmt->bindParam(':sloc', $thissloc);		$stmt->bindParam(':bloc', $thisbloc);		$stmt->bindParam(':who', $thiswho);		$stmt->bindParam(':inet', $thisinet);		$stmt->bindParam(':depos', $thisdepos);		$stmt->bindParam(':skipstat', $thisskipstat);		$stmt->bindParam(':mincost', $thismincost);		$stmt->bindParam(':base', $thisbase);		$stmt->bindParam(':sent', $thissent);		$stmt->bindParam(':ware', $thisware);		$stmt->bindParam(':vintage', $thisvintage);		$stmt->bindParam(':lreg', $thislreg);		$stmt->bindParam(':lstore', $thislstore);		$stmt->bindParam(':isdel', $thisisdel);		$stmt->bindParam(':tstamp', $thiststamp);		$stmt->execute();		} catch (PDOException $e) {			$message = $e->getMessage();			echo $message;		}		}		$spiritsEND=$db->commit();		if($spiritsEND==TRUE){			http_response_code(200);			echo json_encode(array("message" => "UPDATED.."));		}		else{			http_response_code(503);			echo json_encode(array("message" => "ERROR UPDATING!!"));			echo json_encode(array("error" =>$spiritsEND));		}?>