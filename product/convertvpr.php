<?php	header("Access-Control-Allow-Origin: *");	header("Content-Type: application/json; charset=UTF-8");	header("Access-Control-Allow-Methods: POST");	header("Access-Control-Max-Age: 3600");	header("Access-Control-Allow-Headers: Content-Type, Access-Control-Allow-Headers, Authorization, X-Requested-With");	include_once '../config/database.php';	$database = new Database();	$db = $database->getConnection();	$bulk = json_decode(file_get_contents("php://input"));	$stmt = $db->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);	$stmt = $db->beginTransaction(); 	foreach($bulk->records as $data){		try {		$query = "INSERT INTO vpr (`brand`,`ml`,`vintage`,`bestbot`,`date`,`pack`,`vend`,`vid`,`upc`,`frontline`,`postoff`,`mixcode`,`ripcode`,`qty1`,`corb1`,`prc1`,`qty2`,`corb2`,`prc2`,`qty3`,`corb3`,`prc3`,`qty4`,`corb4`,`prc4`,`qty5`,`corb5`,`prc5`,`qty6`,`corb6`,`prc6`,`tstamp`,`isdel`,`lreg`,`lstore`)			VALUES 		(:brand,:ml,:vintage,:bestbot,:date,:pack,:vend,:vid,:upc,:frontline,:postoff,:mixcode,:ripcode,:qty1,:corb1,:prc1,:qty2,:corb2,:prc2,:qty3,:corb3,:prc3,:qty4,:corb4,:prc4,:qty5,:corb5,:prc5,:qty6,:corb6,:prc6,now(),0,:lreg,:lstore)		ON DUPLICATE KEY UPDATE		`brand` = :brand,		`ml` = :ml,		`vintage` = :vintage,		`bestbot` = :bestbot,		`date` = :date,		`pack` = :pack,		`vend` = :vend,		`vid` = :vid,		`upc` = :upc,		`frontline` = :frontline,		`postoff` = :postoff,		`mixcode` = :mixcode,		`ripcode` = :ripcode,		`qty1` = :qty1,		`corb1` = :corb1,		`prc1` = :prc1,		`qty2` = :qty2,		`corb2` = :corb2,		`prc2` = :prc2,		`qty3` = :qty3,		`corb3` = :corb3,		`prc3` = :prc3,		`qty4` = :qty4,		`corb4` = :corb4,		`prc4` = :prc4,		`qty5` = :qty5,		`corb5` = :corb5,		`prc5` = :prc5,		`qty6` = :qty6,		`corb6` = :corb6,		`prc6` = :prc6,		`tstamp` = NOW(),		`lstore` = :lstore,		`lreg` = :lreg,		`isdel` = :isdel";		$stmt = $db->prepare($query);		$thisbrand=strip_tags($data->brand);		$thisml=strip_tags($data->ml);		$thisvintage=strip_tags($data->vintage);		$thisbestbot=strip_tags($data->bestbot);		$thisdate=strip_tags($data->date);		$thispack=strip_tags($data->pack);		$thisvend=strip_tags($data->vend);		$thisvid=strip_tags($data->vid);		$thisupc=strip_tags($data->upc);		$thisfrontline=strip_tags($data->frontline);		$thispostoff=strip_tags($data->postoff);		$thismixcode=strip_tags($data->mixcode);		$thisripcode=strip_tags($data->ripcode);		$thisqty1=strip_tags($data->qty1);		$thiscorb1=strip_tags($data->corb1);		$thisprc1=strip_tags($data->prc1);		$thisqty2=strip_tags($data->qty2);		$thiscorb2=strip_tags($data->corb2);		$thisprc2=strip_tags($data->prc2);		$thisqty3=strip_tags($data->qty3);		$thiscorb3=strip_tags($data->corb3);		$thisprc3=strip_tags($data->prc3);		$thisqty4=strip_tags($data->qty4);		$thiscorb4=strip_tags($data->corb4);		$thisprc4=strip_tags($data->prc4);		$thisqty5=strip_tags($data->qty5);		$thiscorb5=strip_tags($data->corb5);		$thisprc5=strip_tags($data->prc5);		$thisqty6=strip_tags($data->qty6);		$thiscorb6=strip_tags($data->corb6);		$thisprc6=strip_tags($data->prc6);		$thislreg=strip_tags($data->lreg);		$thislstore=strip_tags($data->lstore);		$thisisdel=strip_tags($data->isdel);		$thiststamp=strip_tags($data->tstamp);		$stmt->bindParam(':brand', $thisbrand);		$stmt->bindParam(':ml', $thisml);		$stmt->bindParam(':vintage', $thisvintage);		$stmt->bindParam(':bestbot', $thisbestbot);		$stmt->bindParam(':date', $thisdate);		$stmt->bindParam(':pack', $thispack);		$stmt->bindParam(':vend', $thisvend);		$stmt->bindParam(':vid', $thisvid);		$stmt->bindParam(':upc', $thisupc);		$stmt->bindParam(':frontline', $thisfrontline);		$stmt->bindParam(':postoff', $thispostoff);		$stmt->bindParam(':mixcode', $thismixcode);		$stmt->bindParam(':ripcode', $thisripcode);		$stmt->bindParam(':qty1', $thisqty1);		$stmt->bindParam(':corb1', $thiscorb1);		$stmt->bindParam(':prc1', $thisprc1);		$stmt->bindParam(':qty2', $thisqty2);		$stmt->bindParam(':corb2', $thiscorb2);		$stmt->bindParam(':prc2', $thisprc2);		$stmt->bindParam(':qty3', $thisqty3);		$stmt->bindParam(':corb3', $thiscorb3);		$stmt->bindParam(':prc3', $thisprc3);		$stmt->bindParam(':qty4', $thisqty4);		$stmt->bindParam(':corb4', $thiscorb4);		$stmt->bindParam(':prc4', $thisprc4);		$stmt->bindParam(':qty5', $thisqty5);		$stmt->bindParam(':corb5', $thiscorb5);		$stmt->bindParam(':prc5', $thisprc5);		$stmt->bindParam(':qty6', $thisqty6);		$stmt->bindParam(':corb6', $thiscorb6);		$stmt->bindParam(':prc6', $thisprc6);		$stmt->bindParam(':lreg', $thislreg);		$stmt->bindParam(':lstore', $thislstore);		$stmt->bindParam(':isdel', $thisisdel);		$stmt->bindParam(':tstamp', $thiststamp);		$stmt->execute();		} catch (PDOException $e) {			$message = $e->getMessage();			echo $message;		}		}		$spiritsEND=$db->commit();		if($spiritsEND==TRUE){			http_response_code(200);			echo json_encode(array("message" => "UPDATED.."));		}		else{			http_response_code(503);			echo json_encode(array("message" => "ERROR UPDATING!!"));			echo json_encode(array("error" =>$spiritsEND));		}?>